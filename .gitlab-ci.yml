# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
# Cole test 1 2

image: gcc
build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
    - wget https://github.com/Kitware/CMake/releases/download/v3.26.3/cmake-3.26.3.tar.gz && tar -xf cmake-3.26.3.tar.gz && cd cmake-3.26.3 && ./bootstrap && make && make install
  script:
    - mkdir build && cd build && cmake .. && cmake --build .
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using CTest and output junit formatted to output.xml
ctest:
  stage: test
  script:
    - ./ctest --output-junit output.xml
  artifacts:
    when: always
    paths:
      - output.xml
    reports:
      junit: output.xml

# deploy:
  # stage: deploy
  # script: echo "Define your deployment script!"
  # environment: production
