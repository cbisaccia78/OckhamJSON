#ifndef JSON_h
#define JSON_h

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "StringUtils.h"
//#include "utils/ArrayUtils.h"

#define OckhamJSON_VERSION_MAJOR @OckhamJSON_VERSION_MAJOR@
#define OckhamJSON_VERSION_MINOR @OckhamJSON_VERSION_MINOR@

typedef enum { 
    BEGIN_ARRAY = 0x5B,
    BEGIN_OBJECT = 0x7B,
} StructuralOpener;

typedef enum { 
    END_ARRAY = 0x5D,
    END_OBJECT = 0x7D, 
} StructuralCloser;

typedef enum {
    NAME_SEPARATOR = 0x3A,
    VALUE_SEPARATOR = 0x2C
} Separator;

typedef enum { OBJECT, ARRAY, NUMBER, STRING, TRUE, FALSE, NULLY, INVALID } ValueType;

char DECIMALPOINT = 0x2E;
char PLUS = 0x2B;
char MINUS = 0x2D;

typedef enum {
    ZERO = 0x30,
    ONE = 0x31,
    TWO = 0x32,
    THREE = 0x33,
    FOUR = 0x34,
    FIVE = 0x35,
    SIX = 0x36,
    SEVEN = 0x37,
    EIGHT = 0x38,
    NINE = 0x39
} DIGIT;

char QUOTATIONMARK = 0x22;
char REVERSESOLIDUS = 0x5C;
const struct {
    int start;
    int end;
} CTRLCHARRANGE = {0x0, 0x1F};

//node declaration

struct nAryTreeNode {
    char *jsonText;
    char *keyName;
    char *value; // should not be set until leaf node
    ValueType valueType;
    bool validSoFar;
    struct nAryTreeNode *parent;
    struct nAryTreenode *prevSibling;
    struct nAryTreeNode *nextSibling;
    struct nAryTreeNode *firstChild; 
};
typedef struct nAryTreeNode nAryTreeNode;

struct Storage {

};
typedef struct Storage Storage;

struct DeSerializationTemplate {
    char *key;
    ValueType valueType;
    int numChildren;
    struct DeSerializationTemplate *parent;
    struct DeSerializationTemplate *firstChild;
};
typedef struct DeSerializationTemplate DeSerializationTemplate;

//node validation functions
bool nodeIsLeaf(nAryTreeNode *node);

//node modification functions
void createRootValue(nAryTreeNode *root, char *rootJsonText);
void parseKeyOffset(nAryTreeNode *node);
void parseKey(nAryTreeNode *node);
void parseValueOffset(nAryTreeNode *node);
void parseValue(nAryTreeNode *node);

DeSerializationTemplate* getChildFromKey(DeSerializationTemplate *node, char *key);
char **enumerateChildKeys(DeSerializationTemplate *node);

bool parse(nAryTreeNode *root, DeSerializationTemplate *t);
void _deserializeFromTemplate(nAryTreeNode *root, DeSerializationTemplate *t, Storage *s);
void deserializeFromTemplate(char *jsonText, DeSerializationTemplate *t, Storage *s);

#endif
